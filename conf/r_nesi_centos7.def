Bootstrap: yum
OSVersion: 7
MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/$basearch/
Include: yum


%post
  yum -y update
  yum -y upgrade
  yum -y install epel-release

  yum -y install git
  yum -y install wget

  yum -y install nginx
  yum -y install libicu

  yum -y install tcl-8.5.13-8.el7.x86_64 \
  lua-filesystem-1.6.2-2.el7.x86_64 \
  lua-devel-5.1.4-15.el7.x86_64 \
  tcl-devel-8.5.13-8.el7.x86_64 \
  lua-bitop-1.0.2-3.el7.x86_64 \
  lua-json-1.3.2-2.el7.noarch \
  lua-term-0.03-3.el7.x86_64 \
  lua-lpeg-0.12-1.el7.x86_64 \
  lua-posix-32-2.el7.x86_64 \
  lua-5.1.4-15.el7.x86_64

  #Rstudio server
  wget https://download2.rstudio.org/server/centos7/x86_64/rstudio-server-rhel-1.4.1717-x86_64.rpm
  yum -y install rstudio-server-rhel-1.4.1717-x86_64.rpm
  # yum -y install texlive-full

  # add SSH for some users workflows
  # apt-get install -y openssh-client

  mkdir -p /etc/services.d/rstudio/
  mkdir -p /usr/local/lib/R/etc/
  # mkdir -p /var/lib/rstudio-server/
  # # RStudio server configuration
  echo "www-address=127.0.0.1" >> /etc/rstudio/rserver.conf
  echo "www-frame-origin=same" >> /etc/rstudio/rserver.conf

  echo '#!/bin/bash \n rstudio-server stop' > /etc/services.d/rstudio/finish

  # echo '\n \
  # \n# Configure httr to perform out-of-band authentication if HTTR_LOCALHOST \
  # \n# is not set since a redirect to localhost may not work depending upon \
  # \n# where this Docker container is running. \
  # \nif(is.na(Sys.getenv("HTTR_LOCALHOST", unset=NA))) { \
  # \n  options(httr_oob_default = TRUE) \
  # \n}' >> /usr/local/lib/R/etc/Rprofile.site
  # # TeX Live distribution, for Rmarkdown
  # apt-get install -y texlive-full


%environment

  export PATH="$PATH:/usr/lib/rstudio-server/bin"

%runscript
  # if [ $# -ne 3 ]; then
  #     echo "Usage: $(basename $0) NGINX_PORT PROXY_URL"
  #     exit 1
  # fi

  module load Python
  module load R/$RVER

  NGINX_PORT="$1"
  PROXY_URL="$2"

  # trick to find a free port (see https://unix.stackexchange.com/a/132524 and jupyter-server-proxy source code)
  RSTUDIO_PORT="$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')"

  # mkdir -p /home/rstudio/.rstudio/monitored/user-settings
  # echo 'alwaysSaveHistory="0" \
  # \nloadRData="0" \
  # \nsaveAction="0"' \
  # > /home/rstudio/.rstudio/monitored/user-settings/user-settings
  # chown -R rstudio:rstudio /home/rstudio/.rstudio

  # # create Nginx configuration template file for rstudio reverse proxy
cat << EOF > /tmp/nginx.conf
pid /tmp/nginx.pid;
worker_processes 1;
error_log /dev/stdout debug;
#daemon off;

events {
  worker_connections 1024;
}

http {
  root /tmp/;
  access_log /tmp/access.log;

  client_body_temp_path /tmp/client_body/;
  fastcgi_temp_path /tmp/fastcgi/;
  proxy_temp_path /tmp/proxy/;
  scgi_temp_path /tmp/scgi/;
  uwsgi_temp_path /tmp/uwsgi/;

  map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen $NGINX_PORT;

    location / {
      proxy_pass http://localhost:$RSTUDIO_PORT;
      proxy_redirect http://localhost:$RSTUDIO_PORT http://\$http_host/$PROXY_URL;
      proxy_redirect https://localhost:$RSTUDIO_PORT https://\$http_host/$PROXY_URL;
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection \$connection_upgrade;
      proxy_read_timeout 20d;
    }
  }
}
EOF

  rserver_cmd="rserver \
  --www-port "$RSTUDIO_PORT" \
  --auth-none 1 \
  --auth-pam-helper pam-helper \
  --server-data-dir /tmp \
  --rsession-which-r=$(which R)"

  nginx_cmd="nginx -c /tmp/nginx.conf \
  -p /tmp \
  -e /tmp/nginx_error.log"

  echo "${rserver_cmd}"
  echo "${nginx_cmd}"
  $rserver_cmd & 
  $nginx_cmd